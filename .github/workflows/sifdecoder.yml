name: sifdecoder
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: ${{ matrix.os }} -- ${{ matrix.problems }} -- ${{ matrix.precision }} precision
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        version: ['12']
        problems: ['sifcollection', 'maros-meszaros', 'netlib-lp']
        precision: ['single', 'double', 'quadruple']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out SIFDecode
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Meson and Ninja
        run: pip install meson ninja

      - name: Install compilers
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}

      # Uncomment this section to obtain ssh access to VM
      # - name: Setup tmate session
      # if: matrix.os == 'windows-latest'
      # uses: mxschmitt/action-tmate@v3

      - name: Download ${{ matrix.problems }}
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/../
          if [[ "${{ matrix.problems }}" == "sifcollection" ]]; then
            git clone https://bitbucket.org/optrove/sif
          fi
          if [[ "${{ matrix.problems }}" == "maros-meszaros" ]]; then
            git clone https://bitbucket.org/optrove/maros-meszaros
            mv maros-meszaros sif
          fi
          if [[ "${{ matrix.problems }}" == "netlib-lp" ]]; then
            git clone https://bitbucket.org/optrove/netlib-lp
            mv netlib-lp sif
          fi

      - name: SIFDecode
        shell: bash
        run: |
          meson setup builddir --buildtype=debug -Ddefault_library=static
          meson compile -C builddir
          cp builddir/sifdecoder $GITHUB_WORKSPACE/../sif

      - name: Decode the SIF files
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/../sif
          for file in *.SIF; do
            if [ -f "$file" ]; then
              echo "Processing $file"
              rm -f *.f *.o *.d
              if [[ "${{ matrix.precision }}" == "single" ]]; then
                ./sifdecoder -sp "$file"
                gfortran -shared -fPIC *.f
              fi
              if [[ "${{ matrix.precision }}" == "double" ]]; then
                ./sifdecoder -dp "$file"
                gfortran -shared -fPIC *.f
              fi
              if [[ "${{ matrix.precision }}" == "quadruple" ]]; then
                ./sifdecoder -qp "$file"
                gfortran -shared -fPIC *.f
              fi
            fi
          done
