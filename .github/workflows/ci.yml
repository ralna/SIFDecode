name: ARCHDefs
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: SIFDecode/${{ matrix.os }}/${{ matrix.compiler }}-v${{ matrix.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: gcc
            version: '12'
            input: '1\n1\nN1\nNyy'
            arch: 'pc64.lnx.gfo'
          - os: macos-latest
            compiler: gcc
            version: '12'
            input: '2\nN1\nNyy'
            arch: 'mac64.osx.gfo'
          - os: ubuntu-latest
            compiler: intel-classic
            version: '2021.10'
            input: '1\n1\nN2\nNyy'
            arch: 'pc64.lnx.ifr'
          - os: macos-latest
            compiler: intel-classic
            version: '2021.10'
            input: '2\nN2\nNyy'
            arch: 'mac64.osx.ifr'
    runs-on: ${{ matrix.os }}
    env:
      ARCHDEFS: ${{ github.workspace }}/ARCHDefs
      SIFDECODE: ${{ github.workspace }}
      MASTSIF: ${{ github.workspace }}/sif
    steps:
      - name: Checkout SIFDecode
        uses: actions/checkout@v4
      - name: Download ARCHDefs
        id: download-archdefs
        uses: robinraju/release-downloader@main
        with:
          repository: "ralna/ARCHDefs"
          latest: true
          tarBall: true
          out-file-path: ""
      - name: Unpack ARCHDefs
        run: |
          tar zxf ARCHDefs-${{ steps.download-archdefs.outputs.tag_name }}.tar.gz
          mv ralna-ARCHDefs-* ARCHDefs
      - name: Install compilers
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}
      - name: Build
        run: |
          export TERM=xterm
          cd $SIFDECODE
          printf "${{ matrix.input }}" > install_config
          ./install_sifdecode < install_config
      - name: Test
        run: |
          export TERM=xterm
          $SIFDECODE/bin/sifdecoder --help
          $SIFDECO: ${{ matrix.version }}
      - name: Build
        run: |
          export TERM=xterm
          cd $SIFDECODE
          printf "${{ matrix.input }}" > install_config
          ./install_sifdecode < install_config
      - name: Test
        run: |
          export TERM=xterm
          export MASTSIF=$GITHUB_WORKSPACE/SIFDecode/SIFDecode/sif/
          $SIFDECODE/bin/sifdecoder --help
          $SIFDECODE/bin/sifdecoder -A ${{ matrix.arch }} ROSENBR.SIF
          # check that all output files exist (EXTER.f may not exist)
          [[ -s "OUTSDIF.d" && -s "AUTOMAT.d" && -s "RANGE.f" && -s "ELFUN.f" && -s "GROUP.f" ]] || exit 1
